{"version":3,"file":"secp256k1-DAr2hZbn.js","sources":["../../../node_modules/viem/node_modules/@noble/hashes/esm/_md.js","../../../node_modules/viem/node_modules/@noble/hashes/esm/sha256.js","../../../node_modules/viem/node_modules/@noble/hashes/esm/hmac.js","../../../node_modules/viem/node_modules/@noble/curves/esm/abstract/utils.js","../../../node_modules/viem/node_modules/@noble/curves/esm/abstract/modular.js","../../../node_modules/viem/node_modules/@noble/curves/esm/abstract/curve.js","../../../node_modules/viem/node_modules/@noble/curves/esm/abstract/weierstrass.js","../../../node_modules/viem/node_modules/@noble/curves/esm/_shortw_utils.js","../../../node_modules/viem/node_modules/@noble/curves/esm/secp256k1.js"],"sourcesContent":["/**\n * Internal Merkle-Damgard hash utils.\n * @module\n */\nimport { aexists, aoutput } from './_assert.js';\nimport { Hash, createView, toBytes } from './utils.js';\n/** Polyfill for Safari 14. https://caniuse.com/mdn-javascript_builtins_dataview_setbiguint64 */\nexport function setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n/** Choice: a ? b : c */\nexport function Chi(a, b, c) {\n    return (a & b) ^ (~a & c);\n}\n/** Majority function, true if any two inputs is true. */\nexport function Maj(a, b, c) {\n    return (a & b) ^ (a & c) ^ (b & c);\n}\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport class HashMD extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        aexists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        aexists(this);\n        aoutput(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in\n        // current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n//# sourceMappingURL=_md.js.map","/**\n * SHA2-256 a.k.a. sha256. In JS, it is the fastest hash, even faster than Blake3.\n *\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n *\n * Check out [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n */\nimport { Chi, HashMD, Maj } from './_md.js';\nimport { rotr, wrapConstructor } from './utils.js';\n/** Round constants: first 32 bits of fractional parts of the cube roots of the first 64 primes 2..311). */\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n/** Initial state: first 32 bits of fractional parts of the square roots of the first 8 primes 2..19. */\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n/**\n * Temporary buffer, not used to store anything between runs.\n * Named this way because it matches specification.\n */\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nexport class SHA256 extends HashMD {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = SHA256_IV[0] | 0;\n        this.B = SHA256_IV[1] | 0;\n        this.C = SHA256_IV[2] | 0;\n        this.D = SHA256_IV[3] | 0;\n        this.E = SHA256_IV[4] | 0;\n        this.F = SHA256_IV[5] | 0;\n        this.G = SHA256_IV[6] | 0;\n        this.H = SHA256_IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n/**\n * Constants taken from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf.\n */\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/** SHA2-256 hash function */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\n/** SHA2-224 hash function */\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n//# sourceMappingURL=sha256.js.map","/**\n * HMAC: RFC2104 message authentication code.\n * @module\n */\nimport { abytes, aexists, ahash } from './_assert.js';\nimport { Hash, toBytes } from './utils.js';\nexport class HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        ahash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        aexists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        aexists(this);\n        abytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n * @example\n * import { hmac } from '@noble/hashes/hmac';\n * import { sha256 } from '@noble/hashes/sha2';\n * const mac1 = hmac(sha256, 'key', 'message');\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map","/**\n * Hex, bytes and number utilities.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nexport function isBytes(a) {\n    return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\nexport function abytes(item) {\n    if (!isBytes(item))\n        throw new Error('Uint8Array expected');\n}\nexport function abool(title, value) {\n    if (typeof value !== 'boolean')\n        throw new Error(title + ' boolean expected, got ' + value);\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    abytes(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\nexport function numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? '0' + hex : hex;\n}\nexport function hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    return hex === '' ? _0n : BigInt('0x' + hex); // Big Endian\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };\nfunction asciiToBase16(ch) {\n    if (ch >= asciis._0 && ch <= asciis._9)\n        return ch - asciis._0; // '2' => 50-48\n    if (ch >= asciis.A && ch <= asciis.F)\n        return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n    if (ch >= asciis.a && ch <= asciis.f)\n        return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n    }\n    return array;\n}\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes) {\n    abytes(bytes);\n    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\nexport function numberToBytesBE(n, len) {\n    return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n) {\n    return hexToBytes(numberToHexUnpadded(n));\n}\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === 'string') {\n        try {\n            res = hexToBytes(hex);\n        }\n        catch (e) {\n            throw new Error(title + ' must be hex string or Uint8Array, cause: ' + e);\n        }\n    }\n    else if (isBytes(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    }\n    else {\n        throw new Error(title + ' must be hex string or Uint8Array');\n    }\n    const len = res.length;\n    if (typeof expectedLength === 'number' && len !== expectedLength)\n        throw new Error(title + ' of length ' + expectedLength + ' expected, got ' + len);\n    return res;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a, b) {\n    if (a.length !== b.length)\n        return false;\n    let diff = 0;\n    for (let i = 0; i < a.length; i++)\n        diff |= a[i] ^ b[i];\n    return diff === 0;\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error('string expected');\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n// Is positive bigint\nconst isPosBig = (n) => typeof n === 'bigint' && _0n <= n;\nexport function inRange(n, min, max) {\n    return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;\n}\n/**\n * Asserts min <= n < max. NOTE: It's < max and not <= max.\n * @example\n * aInRange('x', x, 1n, 256n); // would assume x is in (1n..255n)\n */\nexport function aInRange(title, n, min, max) {\n    // Why min <= n < max and not a (min < n < max) OR b (min <= n <= max)?\n    // consider P=256n, min=0n, max=P\n    // - a for min=0 would require -1:          `inRange('x', x, -1n, P)`\n    // - b would commonly require subtraction:  `inRange('x', x, 0n, P - 1n)`\n    // - our way is the cleanest:               `inRange('x', x, 0n, P)\n    if (!inRange(n, min, max))\n        throw new Error('expected valid ' + title + ': ' + min + ' <= n < ' + max + ', got ' + n);\n}\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n) {\n    let len;\n    for (len = 0; n > _0n; n >>= _1n, len += 1)\n        ;\n    return len;\n}\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n, pos) {\n    return (n >> BigInt(pos)) & _1n;\n}\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n, pos, value) {\n    return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n) => (_2n << BigInt(n - 1)) - _1n;\n// DRBG\nconst u8n = (data) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr) => Uint8Array.from(arr); // another shortcut\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== 'number' || hashLen < 2)\n        throw new Error('hashLen must be a number');\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\n        throw new Error('qByteLen must be a number');\n    if (typeof hmacFn !== 'function')\n        throw new Error('hmacFn must be a function');\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => {\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n()) => {\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0)\n            return;\n        k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = () => {\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000)\n            throw new Error('drbg: tried 1000 values');\n        let len = 0;\n        const out = [];\n        while (len < qByteLen) {\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes(...out);\n    };\n    const genUntil = (seed, pred) => {\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while (!(res = pred(gen())))\n            reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val) => typeof val === 'bigint',\n    function: (val) => typeof val === 'function',\n    boolean: (val) => typeof val === 'boolean',\n    string: (val) => typeof val === 'string',\n    stringOrUint8Array: (val) => typeof val === 'string' || isBytes(val),\n    isSafeInteger: (val) => Number.isSafeInteger(val),\n    array: (val) => Array.isArray(val),\n    field: (val, object) => object.Fp.isValid(val),\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nexport function validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== 'function')\n            throw new Error('invalid validator function');\n        const val = object[fieldName];\n        if (isOptional && val === undefined)\n            return;\n        if (!checkVal(val, object)) {\n            throw new Error('param ' + String(fieldName) + ' is invalid. Expected ' + type + ', got ' + val);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))\n        checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))\n        checkField(fieldName, type, true);\n    return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n/**\n * throws not implemented error\n */\nexport const notImplemented = () => {\n    throw new Error('not implemented');\n};\n/**\n * Memoizes (caches) computation result.\n * Uses WeakMap: the value is going auto-cleaned by GC after last reference is removed.\n */\nexport function memoized(fn) {\n    const map = new WeakMap();\n    return (arg, ...args) => {\n        const val = map.get(arg);\n        if (val !== undefined)\n            return val;\n        const computed = fn(arg, ...args);\n        map.set(arg, computed);\n        return computed;\n    };\n}\n//# sourceMappingURL=utils.js.map","/**\n * Utils for modular division and finite fields.\n * A finite field over 11 is integer number operations `mod 11`.\n * There is no division: it is replaced by modular multiplicative inverse.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { bitMask, bytesToNumberBE, bytesToNumberLE, ensureBytes, numberToBytesBE, numberToBytesLE, validateObject, } from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = /* @__PURE__ */ BigInt(2), _3n = /* @__PURE__ */ BigInt(3);\n// prettier-ignore\nconst _4n = /* @__PURE__ */ BigInt(4), _5n = /* @__PURE__ */ BigInt(5), _8n = /* @__PURE__ */ BigInt(8);\n// prettier-ignore\nconst _9n = /* @__PURE__ */ BigInt(9), _16n = /* @__PURE__ */ BigInt(16);\n// Calculates a modulo b\nexport function mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @todo use field version && remove\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\nexport function pow(num, power, modulo) {\n    if (power < _0n)\n        throw new Error('invalid exponent, negatives unsupported');\n    if (modulo <= _0n)\n        throw new Error('invalid modulus');\n    if (modulo === _1n)\n        return _0n;\n    let res = _1n;\n    while (power > _0n) {\n        if (power & _1n)\n            res = (res * num) % modulo;\n        num = (num * num) % modulo;\n        power >>= _1n;\n    }\n    return res;\n}\n/** Does `x^(2^power)` mod p. `pow2(30, 4)` == `30^(2^4)` */\nexport function pow2(x, power, modulo) {\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\n/**\n * Inverses number over modulo.\n * Implemented using [Euclidean GCD](https://brilliant.org/wiki/extended-euclidean-algorithm/).\n */\nexport function invert(number, modulo) {\n    if (number === _0n)\n        throw new Error('invert: expected non-zero number');\n    if (modulo <= _0n)\n        throw new Error('invert: expected positive modulus, got ' + modulo);\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P) {\n    // Legendre constant: used to calculate Legendre symbol (a | p),\n    // which denotes the value of a^((p-1)/2) (mod p).\n    // (a | p) ≡ 1    if a is a square (mod p)\n    // (a | p) ≡ -1   if a is not a square (mod p)\n    // (a | p) ≡ 0    if a ≡ 0 (mod p)\n    const legendreC = (P - _1n) / _2n;\n    let Q, S, Z;\n    // Step 1: By factoring out powers of 2 from p - 1,\n    // find q and s such that p - 1 = q*(2^s) with q odd\n    for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++)\n        ;\n    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n    for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++) {\n        // Crash instead of infinity loop, we cannot reasonable count until P.\n        if (Z > 1000)\n            throw new Error('Cannot find square root: likely non-prime P');\n    }\n    // Fast-path\n    if (S === 1) {\n        const p1div4 = (P + _1n) / _4n;\n        return function tonelliFast(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Slow-path\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))\n            throw new Error('Cannot find square root');\n        let r = S;\n        // TODO: will fail at Fp2/etc\n        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n        let x = Fp.pow(n, Q1div2); // first guess at the square root\n        let b = Fp.pow(n, Q); // first guess at the fudge factor\n        while (!Fp.eql(b, Fp.ONE)) {\n            if (Fp.eql(b, Fp.ZERO))\n                return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n            // Find m such b^(2^m)==1\n            let m = 1;\n            for (let t2 = Fp.sqr(b); m < r; m++) {\n                if (Fp.eql(t2, Fp.ONE))\n                    break;\n                t2 = Fp.sqr(t2); // t2 *= t2\n            }\n            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n            const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n            g = Fp.sqr(ge); // g = ge * ge\n            x = Fp.mul(x, ge); // x *= ge\n            b = Fp.mul(b, g); // b *= g\n            r = m;\n        }\n        return x;\n    };\n}\n/**\n * Square root for a finite field. It will try to check if optimizations are applicable and fall back to 4:\n *\n * 1. P ≡ 3 (mod 4)\n * 2. P ≡ 5 (mod 8)\n * 3. P ≡ 9 (mod 16)\n * 4. Tonelli-Shanks algorithm\n *\n * Different algorithms can give different roots, it is up to user to decide which one they want.\n * For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n */\nexport function FpSqrt(P) {\n    // P ≡ 3 (mod 4)\n    // √n = n^((P+1)/4)\n    if (P % _4n === _3n) {\n        // Not all roots possible!\n        // const ORDER =\n        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n        // const NUM = 72057594037927816n;\n        const p1div4 = (P + _1n) / _4n;\n        return function sqrt3mod4(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            // Throw if root**2 != n\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n    if (P % _8n === _5n) {\n        const c1 = (P - _5n) / _8n;\n        return function sqrt5mod8(Fp, n) {\n            const n2 = Fp.mul(n, _2n);\n            const v = Fp.pow(n2, c1);\n            const nv = Fp.mul(n, v);\n            const i = Fp.mul(Fp.mul(nv, _2n), v);\n            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // P ≡ 9 (mod 16)\n    if (P % _16n === _9n) {\n        // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n        // Means we cannot use sqrt for constants at all!\n        //\n        // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n        // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n        // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n        // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n        // sqrt = (x) => {\n        //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n        //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n        //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n        //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n        //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n        //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n        //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n        //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n        //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n        //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n        // }\n    }\n    // Other cases: Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\n// prettier-ignore\nconst FIELD_FIELDS = [\n    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n    'eql', 'add', 'sub', 'mul', 'pow', 'div',\n    'addN', 'subN', 'mulN', 'sqrN'\n];\nexport function validateField(field) {\n    const initial = {\n        ORDER: 'bigint',\n        MASK: 'bigint',\n        BYTES: 'isSafeInteger',\n        BITS: 'isSafeInteger',\n    };\n    const opts = FIELD_FIELDS.reduce((map, val) => {\n        map[val] = 'function';\n        return map;\n    }, initial);\n    return validateObject(field, opts);\n}\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow(f, num, power) {\n    // Should have same speed as pow for bigints\n    // TODO: benchmark!\n    if (power < _0n)\n        throw new Error('invalid exponent, negatives unsupported');\n    if (power === _0n)\n        return f.ONE;\n    if (power === _1n)\n        return num;\n    let p = f.ONE;\n    let d = num;\n    while (power > _0n) {\n        if (power & _1n)\n            p = f.mul(p, d);\n        d = f.sqr(d);\n        power >>= _1n;\n    }\n    return p;\n}\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch(f, nums) {\n    const tmp = new Array(nums.length);\n    // Walk from first to last, multiply them by each other MOD p\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = acc;\n        return f.mul(acc, num);\n    }, f.ONE);\n    // Invert last element\n    const inverted = f.inv(lastMultiplied);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = f.mul(acc, tmp[i]);\n        return f.mul(acc, num);\n    }, inverted);\n    return tmp;\n}\nexport function FpDiv(f, lhs, rhs) {\n    return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n/**\n * Legendre symbol.\n * * (a | p) ≡ 1    if a is a square (mod p), quadratic residue\n * * (a | p) ≡ -1   if a is not a square (mod p), quadratic non residue\n * * (a | p) ≡ 0    if a ≡ 0 (mod p)\n */\nexport function FpLegendre(order) {\n    const legendreConst = (order - _1n) / _2n; // Integer arithmetic\n    return (f, x) => f.pow(x, legendreConst);\n}\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare(f) {\n    const legendre = FpLegendre(f.ORDER);\n    return (x) => {\n        const p = legendre(f, x);\n        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n    };\n}\n// CURVE.n lengths\nexport function nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return { nBitLength: _nBitLength, nByteLength };\n}\n/**\n * Initializes a finite field over prime.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * Fragile: always run a benchmark on a change.\n * Security note: operations don't check 'isValid' for all elements for performance reasons,\n * it is caller responsibility to check this.\n * This is low-level code, please make sure you know what you're doing.\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(ORDER, bitLen, isLE = false, redef = {}) {\n    if (ORDER <= _0n)\n        throw new Error('invalid field: expected ORDER > 0, got ' + ORDER);\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n    if (BYTES > 2048)\n        throw new Error('invalid field: expected ORDER of <= 2048 bytes');\n    let sqrtP; // cached sqrtP\n    const f = Object.freeze({\n        ORDER,\n        isLE,\n        BITS,\n        BYTES,\n        MASK: bitMask(BITS),\n        ZERO: _0n,\n        ONE: _1n,\n        create: (num) => mod(num, ORDER),\n        isValid: (num) => {\n            if (typeof num !== 'bigint')\n                throw new Error('invalid field element: expected bigint, got ' + typeof num);\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num) => num === _0n,\n        isOdd: (num) => (num & _1n) === _1n,\n        neg: (num) => mod(-num, ORDER),\n        eql: (lhs, rhs) => lhs === rhs,\n        sqr: (num) => mod(num * num, ORDER),\n        add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n        pow: (num, power) => FpPow(f, num, power),\n        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num) => num * num,\n        addN: (lhs, rhs) => lhs + rhs,\n        subN: (lhs, rhs) => lhs - rhs,\n        mulN: (lhs, rhs) => lhs * rhs,\n        inv: (num) => invert(num, ORDER),\n        sqrt: redef.sqrt ||\n            ((n) => {\n                if (!sqrtP)\n                    sqrtP = FpSqrt(ORDER);\n                return sqrtP(f, n);\n            }),\n        invertBatch: (lst) => FpInvertBatch(f, lst),\n        // TODO: do we really need constant cmov?\n        // We don't have const-time bigints anyway, so probably will be not very useful\n        cmov: (a, b, c) => (c ? b : a),\n        toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n        fromBytes: (bytes) => {\n            if (bytes.length !== BYTES)\n                throw new Error('Field.fromBytes: expected ' + BYTES + ' bytes, got ' + bytes.length);\n            return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n        },\n    });\n    return Object.freeze(f);\n}\nexport function FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(\"Field doesn't have isOdd\");\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nexport function FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(\"Field doesn't have isOdd\");\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use `mapKeyToField` instead\n */\nexport function hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = ensureBytes('privateHash', hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n        throw new Error('hashToPrivateScalar: expected ' + minLen + '-1024 bytes of input, got ' + hashLen);\n    const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n}\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder) {\n    if (typeof fieldOrder !== 'bigint')\n        throw new Error('field order must be bigint');\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n}\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder) {\n    const length = getFieldBytesLength(fieldOrder);\n    return length + Math.ceil(length / 2);\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key, fieldOrder, isLE = false) {\n    const len = key.length;\n    const fieldLen = getFieldBytesLength(fieldOrder);\n    const minLen = getMinHashLength(fieldOrder);\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n    if (len < 16 || len < minLen || len > 1024)\n        throw new Error('expected ' + minLen + '-1024 bytes of input, got ' + len);\n    const num = isLE ? bytesToNumberLE(key) : bytesToNumberBE(key);\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\n    return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n//# sourceMappingURL=modular.js.map","/**\n * Methods for elliptic curve multiplication by scalars.\n * Contains wNAF, pippenger\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { nLength, validateField } from './modular.js';\nimport { bitLen, validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nfunction constTimeNegate(condition, item) {\n    const neg = item.negate();\n    return condition ? neg : item;\n}\nfunction validateW(W, bits) {\n    if (!Number.isSafeInteger(W) || W <= 0 || W > bits)\n        throw new Error('invalid window size, expected [1..' + bits + '], got W=' + W);\n}\nfunction calcWOpts(W, bits) {\n    validateW(W, bits);\n    const windows = Math.ceil(bits / W) + 1; // +1, because\n    const windowSize = 2 ** (W - 1); // -1 because we skip zero\n    return { windows, windowSize };\n}\nfunction validateMSMPoints(points, c) {\n    if (!Array.isArray(points))\n        throw new Error('array expected');\n    points.forEach((p, i) => {\n        if (!(p instanceof c))\n            throw new Error('invalid point at index ' + i);\n    });\n}\nfunction validateMSMScalars(scalars, field) {\n    if (!Array.isArray(scalars))\n        throw new Error('array of scalars expected');\n    scalars.forEach((s, i) => {\n        if (!field.isValid(s))\n            throw new Error('invalid scalar at index ' + i);\n    });\n}\n// Since points in different groups cannot be equal (different object constructor),\n// we can have single place to store precomputes\nconst pointPrecomputes = new WeakMap();\nconst pointWindowSizes = new WeakMap(); // This allows use make points immutable (nothing changes inside)\nfunction getW(P) {\n    return pointWindowSizes.get(P) || 1;\n}\n/**\n * Elliptic curve multiplication of Point by scalar. Fragile.\n * Scalars should always be less than curve order: this should be checked inside of a curve itself.\n * Creates precomputation tables for fast multiplication:\n * - private scalar is split by fixed size windows of W bits\n * - every window point is collected from window's table & added to accumulator\n * - since windows are different, same point inside tables won't be accessed more than once per calc\n * - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n * - +1 window is neccessary for wNAF\n * - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n *\n * @todo Research returning 2d JS array of windows, instead of a single window.\n * This would allow windows to be in different memory locations\n */\nexport function wNAF(c, bits) {\n    return {\n        constTimeNegate,\n        hasPrecomputes(elm) {\n            return getW(elm) !== 1;\n        },\n        // non-const time multiplication ladder\n        unsafeLadder(elm, n, p = c.ZERO) {\n            let d = elm;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n         * - 𝑊 is the window size\n         * - 𝑛 is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @param elm Point instance\n         * @param W window size\n         * @returns precomputed point tables flattened to a single array\n         */\n        precomputeWindow(elm, W) {\n            const { windows, windowSize } = calcWOpts(W, bits);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for (let window = 0; window < windows; window++) {\n                base = p;\n                points.push(base);\n                // =1, because we skip zero\n                for (let i = 1; i < windowSize; i++) {\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */\n        wNAF(W, precomputes, n) {\n            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n            // But need to carefully remove other checks before wNAF. ORDER == bits here\n            const { windows, windowSize } = calcWOpts(W, bits);\n            let p = c.ZERO;\n            let f = c.BASE;\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n            const maxNumber = 2 ** W;\n            const shiftBy = BigInt(W);\n            for (let window = 0; window < windows; window++) {\n                const offset = window * windowSize;\n                // Extract W bits.\n                let wbits = Number(n & mask);\n                // Shift number by W bits.\n                n >>= shiftBy;\n                // If the bits are bigger than max size, we'll split those.\n                // +224 => 256 - 32\n                if (wbits > windowSize) {\n                    wbits -= maxNumber;\n                    n += _1n;\n                }\n                // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n                // there is negate now: it is possible that negated element from low value\n                // would be the same as high element, which will create carry into next window.\n                // It's not obvious how this can fail, but still worth investigating later.\n                // Check if we're onto Zero point.\n                // Add random point inside current window to f.\n                const offset1 = offset;\n                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n                const cond1 = window % 2 !== 0;\n                const cond2 = wbits < 0;\n                if (wbits === 0) {\n                    // The most important part for const-time getPublicKey\n                    f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n                }\n                else {\n                    p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n                }\n            }\n            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n            // Even if the variable is still unused, there are some checks which will\n            // throw an exception, so compiler needs to prove they won't happen, which is hard.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return { p, f };\n        },\n        /**\n         * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @param acc accumulator point to add result of multiplication\n         * @returns point\n         */\n        wNAFUnsafe(W, precomputes, n, acc = c.ZERO) {\n            const { windows, windowSize } = calcWOpts(W, bits);\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n            const maxNumber = 2 ** W;\n            const shiftBy = BigInt(W);\n            for (let window = 0; window < windows; window++) {\n                const offset = window * windowSize;\n                if (n === _0n)\n                    break; // No need to go over empty scalar\n                // Extract W bits.\n                let wbits = Number(n & mask);\n                // Shift number by W bits.\n                n >>= shiftBy;\n                // If the bits are bigger than max size, we'll split those.\n                // +224 => 256 - 32\n                if (wbits > windowSize) {\n                    wbits -= maxNumber;\n                    n += _1n;\n                }\n                if (wbits === 0)\n                    continue;\n                let curr = precomputes[offset + Math.abs(wbits) - 1]; // -1 because we skip zero\n                if (wbits < 0)\n                    curr = curr.negate();\n                // NOTE: by re-using acc, we can save a lot of additions in case of MSM\n                acc = acc.add(curr);\n            }\n            return acc;\n        },\n        getPrecomputes(W, P, transform) {\n            // Calculate precomputes on a first run, reuse them after\n            let comp = pointPrecomputes.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1)\n                    pointPrecomputes.set(P, transform(comp));\n            }\n            return comp;\n        },\n        wNAFCached(P, n, transform) {\n            const W = getW(P);\n            return this.wNAF(W, this.getPrecomputes(W, P, transform), n);\n        },\n        wNAFCachedUnsafe(P, n, transform, prev) {\n            const W = getW(P);\n            if (W === 1)\n                return this.unsafeLadder(P, n, prev); // For W=1 ladder is ~x2 faster\n            return this.wNAFUnsafe(W, this.getPrecomputes(W, P, transform), n, prev);\n        },\n        // We calculate precomputes for elliptic curve point multiplication\n        // using windowed method. This specifies window size and\n        // stores precomputed values. Usually only base point would be precomputed.\n        setWindowSize(P, W) {\n            validateW(W, bits);\n            pointWindowSizes.set(P, W);\n            pointPrecomputes.delete(P);\n        },\n    };\n}\n/**\n * Pippenger algorithm for multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * 30x faster vs naive addition on L=4096, 10x faster with precomputes.\n * For N=254bit, L=1, it does: 1024 ADD + 254 DBL. For L=5: 1536 ADD + 254 DBL.\n * Algorithmically constant-time (for same L), even when 1 point + scalar, or when scalar = 0.\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @param scalars array of L scalars (aka private keys / bigints)\n */\nexport function pippenger(c, fieldN, points, scalars) {\n    // If we split scalars by some window (let's say 8 bits), every chunk will only\n    // take 256 buckets even if there are 4096 scalars, also re-uses double.\n    // TODO:\n    // - https://eprint.iacr.org/2024/750.pdf\n    // - https://tches.iacr.org/index.php/TCHES/article/view/10287\n    // 0 is accepted in scalars\n    validateMSMPoints(points, c);\n    validateMSMScalars(scalars, fieldN);\n    if (points.length !== scalars.length)\n        throw new Error('arrays of points and scalars must have equal length');\n    const zero = c.ZERO;\n    const wbits = bitLen(BigInt(points.length));\n    const windowSize = wbits > 12 ? wbits - 3 : wbits > 4 ? wbits - 2 : wbits ? 2 : 1; // in bits\n    const MASK = (1 << windowSize) - 1;\n    const buckets = new Array(MASK + 1).fill(zero); // +1 for zero array\n    const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;\n    let sum = zero;\n    for (let i = lastBits; i >= 0; i -= windowSize) {\n        buckets.fill(zero);\n        for (let j = 0; j < scalars.length; j++) {\n            const scalar = scalars[j];\n            const wbits = Number((scalar >> BigInt(i)) & BigInt(MASK));\n            buckets[wbits] = buckets[wbits].add(points[j]);\n        }\n        let resI = zero; // not using this will do small speed-up, but will lose ct\n        // Skip first bucket, because it is zero\n        for (let j = buckets.length - 1, sumI = zero; j > 0; j--) {\n            sumI = sumI.add(buckets[j]);\n            resI = resI.add(sumI);\n        }\n        sum = sum.add(resI);\n        if (i !== 0)\n            for (let j = 0; j < windowSize; j++)\n                sum = sum.double();\n    }\n    return sum;\n}\n/**\n * Precomputed multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @returns function which multiplies points with scaars\n */\nexport function precomputeMSMUnsafe(c, fieldN, points, windowSize) {\n    /**\n     * Performance Analysis of Window-based Precomputation\n     *\n     * Base Case (256-bit scalar, 8-bit window):\n     * - Standard precomputation requires:\n     *   - 31 additions per scalar × 256 scalars = 7,936 ops\n     *   - Plus 255 summary additions = 8,191 total ops\n     *   Note: Summary additions can be optimized via accumulator\n     *\n     * Chunked Precomputation Analysis:\n     * - Using 32 chunks requires:\n     *   - 255 additions per chunk\n     *   - 256 doublings\n     *   - Total: (255 × 32) + 256 = 8,416 ops\n     *\n     * Memory Usage Comparison:\n     * Window Size | Standard Points | Chunked Points\n     * ------------|-----------------|---------------\n     *     4-bit   |     520         |      15\n     *     8-bit   |    4,224        |     255\n     *    10-bit   |   13,824        |   1,023\n     *    16-bit   |  557,056        |  65,535\n     *\n     * Key Advantages:\n     * 1. Enables larger window sizes due to reduced memory overhead\n     * 2. More efficient for smaller scalar counts:\n     *    - 16 chunks: (16 × 255) + 256 = 4,336 ops\n     *    - ~2x faster than standard 8,191 ops\n     *\n     * Limitations:\n     * - Not suitable for plain precomputes (requires 256 constant doublings)\n     * - Performance degrades with larger scalar counts:\n     *   - Optimal for ~256 scalars\n     *   - Less efficient for 4096+ scalars (Pippenger preferred)\n     */\n    validateW(windowSize, fieldN.BITS);\n    validateMSMPoints(points, c);\n    const zero = c.ZERO;\n    const tableSize = 2 ** windowSize - 1; // table size (without zero)\n    const chunks = Math.ceil(fieldN.BITS / windowSize); // chunks of item\n    const MASK = BigInt((1 << windowSize) - 1);\n    const tables = points.map((p) => {\n        const res = [];\n        for (let i = 0, acc = p; i < tableSize; i++) {\n            res.push(acc);\n            acc = acc.add(p);\n        }\n        return res;\n    });\n    return (scalars) => {\n        validateMSMScalars(scalars, fieldN);\n        if (scalars.length > points.length)\n            throw new Error('array of scalars must be smaller than array of points');\n        let res = zero;\n        for (let i = 0; i < chunks; i++) {\n            // No need to double if accumulator is still zero.\n            if (res !== zero)\n                for (let j = 0; j < windowSize; j++)\n                    res = res.double();\n            const shiftBy = BigInt(chunks * windowSize - (i + 1) * windowSize);\n            for (let j = 0; j < scalars.length; j++) {\n                const n = scalars[j];\n                const curr = Number((n >> shiftBy) & MASK);\n                if (!curr)\n                    continue; // skip zero scalars chunks\n                res = res.add(tables[j][curr - 1]);\n            }\n        }\n        return res;\n    };\n}\nexport function validateBasic(curve) {\n    validateField(curve.Fp);\n    validateObject(curve, {\n        n: 'bigint',\n        h: 'bigint',\n        Gx: 'field',\n        Gy: 'field',\n    }, {\n        nBitLength: 'isSafeInteger',\n        nByteLength: 'isSafeInteger',\n    });\n    // Set defaults\n    return Object.freeze({\n        ...nLength(curve.n, curve.nBitLength),\n        ...curve,\n        ...{ p: curve.Fp.ORDER },\n    });\n}\n//# sourceMappingURL=curve.js.map","/**\n * Short Weierstrass curve methods. The formula is: y² = x³ + ax + b.\n *\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance\n * of nominative types in TypeScript and interfaces only check for shape, so it's hard to create\n * unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * @todo https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { pippenger, validateBasic, wNAF, } from './curve.js';\nimport { Field, getMinHashLength, invert, mapHashToField, mod, validateField, } from './modular.js';\nimport * as ut from './utils.js';\nimport { abool, ensureBytes, memoized } from './utils.js';\nfunction validateSigVerOpts(opts) {\n    if (opts.lowS !== undefined)\n        abool('lowS', opts.lowS);\n    if (opts.prehash !== undefined)\n        abool('prehash', opts.prehash);\n}\nfunction validatePointOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(opts, {\n        a: 'field',\n        b: 'field',\n    }, {\n        allowedPrivateKeyLengths: 'array',\n        wrapPrivateKey: 'boolean',\n        isTorsionFree: 'function',\n        clearCofactor: 'function',\n        allowInfinityPoint: 'boolean',\n        fromBytes: 'function',\n        toBytes: 'function',\n    });\n    const { endo, Fp, a } = opts;\n    if (endo) {\n        if (!Fp.eql(a, Fp.ZERO)) {\n            throw new Error('invalid endomorphism, can only be defined for Koblitz curves that have a=0');\n        }\n        if (typeof endo !== 'object' ||\n            typeof endo.beta !== 'bigint' ||\n            typeof endo.splitScalar !== 'function') {\n            throw new Error('invalid endomorphism, expected beta: bigint and splitScalar: function');\n        }\n    }\n    return Object.freeze({ ...opts });\n}\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexport class DERErr extends Error {\n    constructor(m = '') {\n        super(m);\n    }\n}\n/**\n * ASN.1 DER encoding utilities. ASN is very complex & fragile. Format:\n *\n *     [0x30 (SEQUENCE), bytelength, 0x02 (INTEGER), intLength, R, 0x02 (INTEGER), intLength, S]\n *\n * Docs: https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/, https://luca.ntop.org/Teaching/Appunti/asn1.html\n */\nexport const DER = {\n    // asn.1 DER encoding utils\n    Err: DERErr,\n    // Basic building block is TLV (Tag-Length-Value)\n    _tlv: {\n        encode: (tag, data) => {\n            const { Err: E } = DER;\n            if (tag < 0 || tag > 256)\n                throw new E('tlv.encode: wrong tag');\n            if (data.length & 1)\n                throw new E('tlv.encode: unpadded data');\n            const dataLen = data.length / 2;\n            const len = ut.numberToHexUnpadded(dataLen);\n            if ((len.length / 2) & 128)\n                throw new E('tlv.encode: long form length too big');\n            // length of length with long form flag\n            const lenLen = dataLen > 127 ? ut.numberToHexUnpadded((len.length / 2) | 128) : '';\n            const t = ut.numberToHexUnpadded(tag);\n            return t + lenLen + len + data;\n        },\n        // v - value, l - left bytes (unparsed)\n        decode(tag, data) {\n            const { Err: E } = DER;\n            let pos = 0;\n            if (tag < 0 || tag > 256)\n                throw new E('tlv.encode: wrong tag');\n            if (data.length < 2 || data[pos++] !== tag)\n                throw new E('tlv.decode: wrong tlv');\n            const first = data[pos++];\n            const isLong = !!(first & 128); // First bit of first length byte is flag for short/long form\n            let length = 0;\n            if (!isLong)\n                length = first;\n            else {\n                // Long form: [longFlag(1bit), lengthLength(7bit), length (BE)]\n                const lenLen = first & 127;\n                if (!lenLen)\n                    throw new E('tlv.decode(long): indefinite length not supported');\n                if (lenLen > 4)\n                    throw new E('tlv.decode(long): byte length is too big'); // this will overflow u32 in js\n                const lengthBytes = data.subarray(pos, pos + lenLen);\n                if (lengthBytes.length !== lenLen)\n                    throw new E('tlv.decode: length bytes not complete');\n                if (lengthBytes[0] === 0)\n                    throw new E('tlv.decode(long): zero leftmost byte');\n                for (const b of lengthBytes)\n                    length = (length << 8) | b;\n                pos += lenLen;\n                if (length < 128)\n                    throw new E('tlv.decode(long): not minimal encoding');\n            }\n            const v = data.subarray(pos, pos + length);\n            if (v.length !== length)\n                throw new E('tlv.decode: wrong value length');\n            return { v, l: data.subarray(pos + length) };\n        },\n    },\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    _int: {\n        encode(num) {\n            const { Err: E } = DER;\n            if (num < _0n)\n                throw new E('integer: negative integers are not allowed');\n            let hex = ut.numberToHexUnpadded(num);\n            // Pad with zero byte if negative flag is present\n            if (Number.parseInt(hex[0], 16) & 0b1000)\n                hex = '00' + hex;\n            if (hex.length & 1)\n                throw new E('unexpected DER parsing assertion: unpadded hex');\n            return hex;\n        },\n        decode(data) {\n            const { Err: E } = DER;\n            if (data[0] & 128)\n                throw new E('invalid signature integer: negative');\n            if (data[0] === 0x00 && !(data[1] & 128))\n                throw new E('invalid signature integer: unnecessary leading zero');\n            return b2n(data);\n        },\n    },\n    toSig(hex) {\n        // parse DER signature\n        const { Err: E, _int: int, _tlv: tlv } = DER;\n        const data = typeof hex === 'string' ? h2b(hex) : hex;\n        ut.abytes(data);\n        const { v: seqBytes, l: seqLeftBytes } = tlv.decode(0x30, data);\n        if (seqLeftBytes.length)\n            throw new E('invalid signature: left bytes after parsing');\n        const { v: rBytes, l: rLeftBytes } = tlv.decode(0x02, seqBytes);\n        const { v: sBytes, l: sLeftBytes } = tlv.decode(0x02, rLeftBytes);\n        if (sLeftBytes.length)\n            throw new E('invalid signature: left bytes after parsing');\n        return { r: int.decode(rBytes), s: int.decode(sBytes) };\n    },\n    hexFromSig(sig) {\n        const { _tlv: tlv, _int: int } = DER;\n        const rs = tlv.encode(0x02, int.encode(sig.r));\n        const ss = tlv.encode(0x02, int.encode(sig.s));\n        const seq = rs + ss;\n        return tlv.encode(0x30, seq);\n    },\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\nexport function weierstrassPoints(opts) {\n    const CURVE = validatePointOpts(opts);\n    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n    const Fn = Field(CURVE.n, CURVE.nBitLength);\n    const toBytes = CURVE.toBytes ||\n        ((_c, point, _isCompressed) => {\n            const a = point.toAffine();\n            return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n        });\n    const fromBytes = CURVE.fromBytes ||\n        ((bytes) => {\n            // const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n            return { x, y };\n        });\n    /**\n     * y² = x³ + ax + b: Short weierstrass curve formula\n     * @returns y²\n     */\n    function weierstrassEquation(x) {\n        const { a, b } = CURVE;\n        const x2 = Fp.sqr(x); // x * x\n        const x3 = Fp.mul(x2, x); // x2 * x\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n    }\n    // Validate whether the passed curve params are valid.\n    // We check if curve equation works for generator point.\n    // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n    // ProjectivePoint class has not been initialized yet.\n    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n        throw new Error('bad generator point: equation left != right');\n    // Valid group elements reside in range 1..n-1\n    function isWithinCurveOrder(num) {\n        return ut.inRange(num, _1n, CURVE.n);\n    }\n    // Validates if priv key is valid and converts it to bigint.\n    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n    function normPrivateKeyToScalar(key) {\n        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n: N } = CURVE;\n        if (lengths && typeof key !== 'bigint') {\n            if (ut.isBytes(key))\n                key = ut.bytesToHex(key);\n            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n            if (typeof key !== 'string' || !lengths.includes(key.length))\n                throw new Error('invalid private key');\n            key = key.padStart(nByteLength * 2, '0');\n        }\n        let num;\n        try {\n            num =\n                typeof key === 'bigint'\n                    ? key\n                    : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n        }\n        catch (error) {\n            throw new Error('invalid private key, expected hex or ' + nByteLength + ' bytes, got ' + typeof key);\n        }\n        if (wrapPrivateKey)\n            num = mod(num, N); // disabled by default, enabled for BLS\n        ut.aInRange('private key', num, _1n, N); // num in range [1..N-1]\n        return num;\n    }\n    function assertPrjPoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ProjectivePoint expected');\n    }\n    // Memoized toAffine / validity check. They are heavy. Points are immutable.\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    const toAffineMemo = memoized((p, iz) => {\n        const { px: x, py: y, pz: z } = p;\n        // Fast-path for normalized points\n        if (Fp.eql(z, Fp.ONE))\n            return { x, y };\n        const is0 = p.is0();\n        // If invZ was 0, we return zero point. However we still want to execute\n        // all operations, so we replace invZ with a random number, 1.\n        if (iz == null)\n            iz = is0 ? Fp.ONE : Fp.inv(z);\n        const ax = Fp.mul(x, iz);\n        const ay = Fp.mul(y, iz);\n        const zz = Fp.mul(z, iz);\n        if (is0)\n            return { x: Fp.ZERO, y: Fp.ZERO };\n        if (!Fp.eql(zz, Fp.ONE))\n            throw new Error('invZ was invalid');\n        return { x: ax, y: ay };\n    });\n    // NOTE: on exception this will crash 'cached' and no value will be set.\n    // Otherwise true will be return\n    const assertValidMemo = memoized((p) => {\n        if (p.is0()) {\n            // (0, 1, 0) aka ZERO is invalid in most contexts.\n            // In BLS, ZERO can be serialized, so we allow it.\n            // (0, 0, 0) is invalid representation of ZERO.\n            if (CURVE.allowInfinityPoint && !Fp.is0(p.py))\n                return;\n            throw new Error('bad point: ZERO');\n        }\n        // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n        const { x, y } = p.toAffine();\n        // Check if x, y are valid field elements\n        if (!Fp.isValid(x) || !Fp.isValid(y))\n            throw new Error('bad point: x or y not FE');\n        const left = Fp.sqr(y); // y²\n        const right = weierstrassEquation(x); // x³ + ax + b\n        if (!Fp.eql(left, right))\n            throw new Error('bad point: equation left != right');\n        if (!p.isTorsionFree())\n            throw new Error('bad point: not in prime-order subgroup');\n        return true;\n    });\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n     * Default Point works in 2d / affine coordinates: (x, y)\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */\n    class Point {\n        constructor(px, py, pz) {\n            this.px = px;\n            this.py = py;\n            this.pz = pz;\n            if (px == null || !Fp.isValid(px))\n                throw new Error('x required');\n            if (py == null || !Fp.isValid(py))\n                throw new Error('y required');\n            if (pz == null || !Fp.isValid(pz))\n                throw new Error('z required');\n            Object.freeze(this);\n        }\n        // Does not validate if the point is on-curve.\n        // Use fromHex instead, or call assertValidity() later.\n        static fromAffine(p) {\n            const { x, y } = p || {};\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('invalid affine point');\n            if (p instanceof Point)\n                throw new Error('projective point not allowed');\n            const is0 = (i) => Fp.eql(i, Fp.ZERO);\n            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n            if (is0(x) && is0(y))\n                return Point.ZERO;\n            return new Point(x, y, Fp.ONE);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        /**\n         * Takes a bunch of Projective Points but executes only one\n         * inversion on all of them. Inversion is very slow operation,\n         * so this improves performance massively.\n         * Optimization: converts a list of projective points to a list of identical points with Z=1.\n         */\n        static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p) => p.pz));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        /**\n         * Converts hash string or Uint8Array to Point.\n         * @param hex short/long ECDSA hex\n         */\n        static fromHex(hex) {\n            const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n            P.assertValidity();\n            return P;\n        }\n        // Multiplies generator point by privateKey.\n        static fromPrivateKey(privateKey) {\n            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n        }\n        // Multiscalar Multiplication\n        static msm(points, scalars) {\n            return pippenger(Point, Fn, points, scalars);\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            wnaf.setWindowSize(this, windowSize);\n        }\n        // A point on curve is valid if it conforms to equation.\n        assertValidity() {\n            assertValidMemo(this);\n        }\n        hasEvenY() {\n            const { y } = this.toAffine();\n            if (Fp.isOdd)\n                return !Fp.isOdd(y);\n            throw new Error(\"Field doesn't support isOdd\");\n        }\n        /**\n         * Compare one point to another.\n         */\n        equals(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n            return U1 && U2;\n        }\n        /**\n         * Flips point to one corresponding to (x, -y) in Affine coordinates.\n         */\n        negate() {\n            return new Point(this.px, Fp.neg(this.py), this.pz);\n        }\n        // Renes-Costello-Batina exception-free doubling formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 3\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n        double() {\n            const { a, b } = CURVE;\n            const b3 = Fp.mul(b, _3n);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            let t0 = Fp.mul(X1, X1); // step 1\n            let t1 = Fp.mul(Y1, Y1);\n            let t2 = Fp.mul(Z1, Z1);\n            let t3 = Fp.mul(X1, Y1);\n            t3 = Fp.add(t3, t3); // step 5\n            Z3 = Fp.mul(X1, Z1);\n            Z3 = Fp.add(Z3, Z3);\n            X3 = Fp.mul(a, Z3);\n            Y3 = Fp.mul(b3, t2);\n            Y3 = Fp.add(X3, Y3); // step 10\n            X3 = Fp.sub(t1, Y3);\n            Y3 = Fp.add(t1, Y3);\n            Y3 = Fp.mul(X3, Y3);\n            X3 = Fp.mul(t3, X3);\n            Z3 = Fp.mul(b3, Z3); // step 15\n            t2 = Fp.mul(a, t2);\n            t3 = Fp.sub(t0, t2);\n            t3 = Fp.mul(a, t3);\n            t3 = Fp.add(t3, Z3);\n            Z3 = Fp.add(t0, t0); // step 20\n            t0 = Fp.add(Z3, t0);\n            t0 = Fp.add(t0, t2);\n            t0 = Fp.mul(t0, t3);\n            Y3 = Fp.add(Y3, t0);\n            t2 = Fp.mul(Y1, Z1); // step 25\n            t2 = Fp.add(t2, t2);\n            t0 = Fp.mul(t2, t3);\n            X3 = Fp.sub(X3, t0);\n            Z3 = Fp.mul(t2, t1);\n            Z3 = Fp.add(Z3, Z3); // step 30\n            Z3 = Fp.add(Z3, Z3);\n            return new Point(X3, Y3, Z3);\n        }\n        // Renes-Costello-Batina exception-free addition formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 1\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n        add(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            const a = CURVE.a;\n            const b3 = Fp.mul(CURVE.b, _3n);\n            let t0 = Fp.mul(X1, X2); // step 1\n            let t1 = Fp.mul(Y1, Y2);\n            let t2 = Fp.mul(Z1, Z2);\n            let t3 = Fp.add(X1, Y1);\n            let t4 = Fp.add(X2, Y2); // step 5\n            t3 = Fp.mul(t3, t4);\n            t4 = Fp.add(t0, t1);\n            t3 = Fp.sub(t3, t4);\n            t4 = Fp.add(X1, Z1);\n            let t5 = Fp.add(X2, Z2); // step 10\n            t4 = Fp.mul(t4, t5);\n            t5 = Fp.add(t0, t2);\n            t4 = Fp.sub(t4, t5);\n            t5 = Fp.add(Y1, Z1);\n            X3 = Fp.add(Y2, Z2); // step 15\n            t5 = Fp.mul(t5, X3);\n            X3 = Fp.add(t1, t2);\n            t5 = Fp.sub(t5, X3);\n            Z3 = Fp.mul(a, t4);\n            X3 = Fp.mul(b3, t2); // step 20\n            Z3 = Fp.add(X3, Z3);\n            X3 = Fp.sub(t1, Z3);\n            Z3 = Fp.add(t1, Z3);\n            Y3 = Fp.mul(X3, Z3);\n            t1 = Fp.add(t0, t0); // step 25\n            t1 = Fp.add(t1, t0);\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.mul(b3, t4);\n            t1 = Fp.add(t1, t2);\n            t2 = Fp.sub(t0, t2); // step 30\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.add(t4, t2);\n            t0 = Fp.mul(t1, t4);\n            Y3 = Fp.add(Y3, t0);\n            t0 = Fp.mul(t5, t4); // step 35\n            X3 = Fp.mul(t3, X3);\n            X3 = Fp.sub(X3, t0);\n            t0 = Fp.mul(t3, t1);\n            Z3 = Fp.mul(t5, Z3);\n            Z3 = Fp.add(Z3, t0); // step 40\n            return new Point(X3, Y3, Z3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, n, Point.normalizeZ);\n        }\n        /**\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\n         * It's faster, but should only be used when you don't care about\n         * an exposed private key e.g. sig verification, which works over *public* keys.\n         */\n        multiplyUnsafe(sc) {\n            const { endo, n: N } = CURVE;\n            ut.aInRange('scalar', sc, _0n, N);\n            const I = Point.ZERO;\n            if (sc === _0n)\n                return I;\n            if (this.is0() || sc === _1n)\n                return this;\n            // Case a: no endomorphism. Case b: has precomputes.\n            if (!endo || wnaf.hasPrecomputes(this))\n                return wnaf.wNAFCachedUnsafe(this, sc, Point.normalizeZ);\n            // Case c: endomorphism\n            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(sc);\n            let k1p = I;\n            let k2p = I;\n            let d = this;\n            while (k1 > _0n || k2 > _0n) {\n                if (k1 & _1n)\n                    k1p = k1p.add(d);\n                if (k2 & _1n)\n                    k2p = k2p.add(d);\n                d = d.double();\n                k1 >>= _1n;\n                k2 >>= _1n;\n            }\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n            return k1p.add(k2p);\n        }\n        /**\n         * Constant time multiplication.\n         * Uses wNAF method. Windowed method may be 10% faster,\n         * but takes 2x longer to generate and consumes 2x memory.\n         * Uses precomputes when available.\n         * Uses endomorphism for Koblitz curves.\n         * @param scalar by which the point would be multiplied\n         * @returns New point\n         */\n        multiply(scalar) {\n            const { endo, n: N } = CURVE;\n            ut.aInRange('scalar', scalar, _1n, N);\n            let point, fake; // Fake point is used to const-time mult\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(scalar);\n                let { p: k1p, f: f1p } = this.wNAF(k1);\n                let { p: k2p, f: f2p } = this.wNAF(k2);\n                k1p = wnaf.constTimeNegate(k1neg, k1p);\n                k2p = wnaf.constTimeNegate(k2neg, k2p);\n                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n                point = k1p.add(k2p);\n                fake = f1p.add(f2p);\n            }\n            else {\n                const { p, f } = this.wNAF(scalar);\n                point = p;\n                fake = f;\n            }\n            // Normalize `z` for both points, but return only real one\n            return Point.normalizeZ([point, fake])[0];\n        }\n        /**\n         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n         * Not using Strauss-Shamir trick: precomputation tables are faster.\n         * The trick could be useful if both P and Q are not G (not in our case).\n         * @returns non-zero affine point\n         */\n        multiplyAndAddUnsafe(Q, a, b) {\n            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n            const mul = (P, a // Select faster multiply() method\n            ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n            const sum = mul(this, a).add(mul(Q, b));\n            return sum.is0() ? undefined : sum;\n        }\n        // Converts Projective point to affine (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        // (x, y, z) ∋ (x=x/z, y=y/z)\n        toAffine(iz) {\n            return toAffineMemo(this, iz);\n        }\n        isTorsionFree() {\n            const { h: cofactor, isTorsionFree } = CURVE;\n            if (cofactor === _1n)\n                return true; // No subgroups, always torsion-free\n            if (isTorsionFree)\n                return isTorsionFree(Point, this);\n            throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n        }\n        clearCofactor() {\n            const { h: cofactor, clearCofactor } = CURVE;\n            if (cofactor === _1n)\n                return this; // Fast-path\n            if (clearCofactor)\n                return clearCofactor(Point, this);\n            return this.multiplyUnsafe(CURVE.h);\n        }\n        toRawBytes(isCompressed = true) {\n            abool('isCompressed', isCompressed);\n            this.assertValidity();\n            return toBytes(Point, this, isCompressed);\n        }\n        toHex(isCompressed = true) {\n            abool('isCompressed', isCompressed);\n            return ut.bytesToHex(this.toRawBytes(isCompressed));\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n    const _bits = CURVE.nBitLength;\n    const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n    // Validate if generator point is on curve\n    return {\n        CURVE,\n        ProjectivePoint: Point,\n        normPrivateKeyToScalar,\n        weierstrassEquation,\n        isWithinCurveOrder,\n    };\n}\nfunction validateOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(opts, {\n        hash: 'hash',\n        hmac: 'function',\n        randomBytes: 'function',\n    }, {\n        bits2int: 'function',\n        bits2int_modN: 'function',\n        lowS: 'boolean',\n    });\n    return Object.freeze({ lowS: true, ...opts });\n}\n/**\n * Creates short weierstrass curve and ECDSA signature methods for it.\n * @example\n * import { Field } from '@noble/curves/abstract/modular';\n * // Before that, define BigInt-s: a, b, p, n, Gx, Gy\n * const curve = weierstrass({ a, b, Fp: Field(p), n, Gx, Gy, h: 1n })\n */\nexport function weierstrass(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER } = CURVE;\n    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n    function modN(a) {\n        return mod(a, CURVE_ORDER);\n    }\n    function invN(a) {\n        return invert(a, CURVE_ORDER);\n    }\n    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({\n        ...CURVE,\n        toBytes(_c, point, isCompressed) {\n            const a = point.toAffine();\n            const x = Fp.toBytes(a.x);\n            const cat = ut.concatBytes;\n            abool('isCompressed', isCompressed);\n            if (isCompressed) {\n                return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n            }\n            else {\n                return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n            }\n        },\n        fromBytes(bytes) {\n            const len = bytes.length;\n            const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // this.assertValidity() is done inside of fromHex\n            if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n                const x = ut.bytesToNumberBE(tail);\n                if (!ut.inRange(x, _1n, Fp.ORDER))\n                    throw new Error('Point is not on curve');\n                const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n                let y;\n                try {\n                    y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n                }\n                catch (sqrtError) {\n                    const suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n                    throw new Error('Point is not on curve' + suffix);\n                }\n                const isYOdd = (y & _1n) === _1n;\n                // ECDSA\n                const isHeadOdd = (head & 1) === 1;\n                if (isHeadOdd !== isYOdd)\n                    y = Fp.neg(y);\n                return { x, y };\n            }\n            else if (len === uncompressedLen && head === 0x04) {\n                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n                return { x, y };\n            }\n            else {\n                const cl = compressedLen;\n                const ul = uncompressedLen;\n                throw new Error('invalid Point, expected length of ' + cl + ', or uncompressed ' + ul + ', got ' + len);\n            }\n        },\n    });\n    const numToNByteStr = (num) => ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n    function isBiggerThanHalfOrder(number) {\n        const HALF = CURVE_ORDER >> _1n;\n        return number > HALF;\n    }\n    function normalizeS(s) {\n        return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n    }\n    // slice bytes num\n    const slcNum = (b, from, to) => ut.bytesToNumberBE(b.slice(from, to));\n    /**\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n     */\n    class Signature {\n        constructor(r, s, recovery) {\n            this.r = r;\n            this.s = s;\n            this.recovery = recovery;\n            this.assertValidity();\n        }\n        // pair (bytes of r, bytes of s)\n        static fromCompact(hex) {\n            const l = CURVE.nByteLength;\n            hex = ensureBytes('compactSignature', hex, l * 2);\n            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n        }\n        // DER encoded ECDSA signature\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n        static fromDER(hex) {\n            const { r, s } = DER.toSig(ensureBytes('DER', hex));\n            return new Signature(r, s);\n        }\n        assertValidity() {\n            ut.aInRange('r', this.r, _1n, CURVE_ORDER); // r in [1..N]\n            ut.aInRange('s', this.s, _1n, CURVE_ORDER); // s in [1..N]\n        }\n        addRecoveryBit(recovery) {\n            return new Signature(this.r, this.s, recovery);\n        }\n        recoverPublicKey(msgHash) {\n            const { r, s, recovery: rec } = this;\n            const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n            if (rec == null || ![0, 1, 2, 3].includes(rec))\n                throw new Error('recovery id invalid');\n            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n            if (radj >= Fp.ORDER)\n                throw new Error('recovery id 2 or 3 invalid');\n            const prefix = (rec & 1) === 0 ? '02' : '03';\n            const R = Point.fromHex(prefix + numToNByteStr(radj));\n            const ir = invN(radj); // r^-1\n            const u1 = modN(-h * ir); // -hr^-1\n            const u2 = modN(s * ir); // sr^-1\n            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n            if (!Q)\n                throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n            Q.assertValidity();\n            return Q;\n        }\n        // Signatures should be low-s, to prevent malleability.\n        hasHighS() {\n            return isBiggerThanHalfOrder(this.s);\n        }\n        normalizeS() {\n            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n        }\n        // DER-encoded\n        toDERRawBytes() {\n            return ut.hexToBytes(this.toDERHex());\n        }\n        toDERHex() {\n            return DER.hexFromSig({ r: this.r, s: this.s });\n        }\n        // padded bytes of r, then padded bytes of s\n        toCompactRawBytes() {\n            return ut.hexToBytes(this.toCompactHex());\n        }\n        toCompactHex() {\n            return numToNByteStr(this.r) + numToNByteStr(this.s);\n        }\n    }\n    const utils = {\n        isValidPrivateKey(privateKey) {\n            try {\n                normPrivateKeyToScalar(privateKey);\n                return true;\n            }\n            catch (error) {\n                return false;\n            }\n        },\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\n        /**\n         * Produces cryptographically secure private key from random of size\n         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n         */\n        randomPrivateKey: () => {\n            const length = getMinHashLength(CURVE.n);\n            return mapHashToField(CURVE.randomBytes(length), CURVE.n);\n        },\n        /**\n         * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n         * Allows to massively speed-up `point.multiply(scalar)`.\n         * @returns cached point\n         * @example\n         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n         * fast.multiply(privKey); // much faster ECDH now\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n            return point;\n        },\n    };\n    /**\n     * Computes public key for a private key. Checks for validity of the private key.\n     * @param privateKey private key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */\n    function getPublicKey(privateKey, isCompressed = true) {\n        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */\n    function isProbPub(item) {\n        const arr = ut.isBytes(item);\n        const str = typeof item === 'string';\n        const len = (arr || str) && item.length;\n        if (arr)\n            return len === compressedLen || len === uncompressedLen;\n        if (str)\n            return len === 2 * compressedLen || len === 2 * uncompressedLen;\n        if (item instanceof Point)\n            return true;\n        return false;\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from private key and public key.\n     * Checks: 1) private key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param privateA private key\n     * @param publicB different public key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */\n    function getSharedSecret(privateA, publicB, isCompressed = true) {\n        if (isProbPub(privateA))\n            throw new Error('first arg must be private key');\n        if (!isProbPub(publicB))\n            throw new Error('second arg must be public key');\n        const b = Point.fromHex(publicB); // check for being on-curve\n        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = CURVE.bits2int ||\n        function (bytes) {\n            // Our custom check \"just in case\"\n            if (bytes.length > 8192)\n                throw new Error('input is too large');\n            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n            // for some cases, since bytes.length * 8 is not actual bitLength.\n            const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n            const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n            return delta > 0 ? num >> BigInt(delta) : num;\n        };\n    const bits2int_modN = CURVE.bits2int_modN ||\n        function (bytes) {\n            return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n        };\n    // NOTE: pads output with zero as per spec\n    const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n    /**\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n     */\n    function int2octets(num) {\n        ut.aInRange('num < 2^' + CURVE.nBitLength, num, _0n, ORDER_MASK);\n        // works with order, can have different size than numToField!\n        return ut.numberToBytesBE(num, CURVE.nByteLength);\n    }\n    // Steps A, D of RFC6979 3.2\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\n    // Used only in sign, not in verify.\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order,\n    // this will be invalid at least for P521. Also it can be bigger for P224 + SHA256\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n        if (['recovered', 'canonical'].some((k) => k in opts))\n            throw new Error('sign() legacy options not supported');\n        const { hash, randomBytes } = CURVE;\n        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n        if (lowS == null)\n            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n        msgHash = ensureBytes('msgHash', msgHash);\n        validateSigVerOpts(opts);\n        if (prehash)\n            msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n        // We can't later call bits2octets, since nested bits2int is broken for curves\n        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n        const h1int = bits2int_modN(msgHash);\n        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n        const seedArgs = [int2octets(d), int2octets(h1int)];\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\n        if (ent != null && ent !== false) {\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n            seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n        }\n        const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n        // Converts signature params into point w r/s, checks result for validity.\n        function k2sig(kBytes) {\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n            if (!isWithinCurveOrder(k))\n                return; // Important: all mod() calls here must be done over N\n            const ik = invN(k); // k^-1 mod n\n            const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n            const r = modN(q.x); // r = q.x mod n\n            if (r === _0n)\n                return;\n            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n            const s = modN(ik * modN(m + r * d)); // Not using blinding here\n            if (s === _0n)\n                return;\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n            let normS = s;\n            if (lowS && isBiggerThanHalfOrder(s)) {\n                normS = normalizeS(s); // if lowS was passed, ensure s is always\n                recovery ^= 1; // // in the bottom half of N\n            }\n            return new Signature(r, normS, recovery); // use normS, not s\n        }\n        return { seed, k2sig };\n    }\n    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };\n    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };\n    /**\n     * Signs message hash with a private key.\n     * ```\n     * sign(m, d, k) where\n     *   (x, y) = G × k\n     *   r = x mod n\n     *   s = (m + dr)/k mod n\n     * ```\n     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n     * @param privKey private key\n     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n     * @returns signature with recovery param\n     */\n    function sign(msgHash, privKey, opts = defaultSigOpts) {\n        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n        const C = CURVE;\n        const drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\n        return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    }\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\n    Point.BASE._setWindowSize(8);\n    // utils.precompute(8, ProjectivePoint.BASE)\n    /**\n     * Verifies a signature against message hash and public key.\n     * Rejects lowS signatures by default: to override,\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   U1 = hs^-1 mod n\n     *   U2 = rs^-1 mod n\n     *   R = U1⋅G - U2⋅P\n     *   mod(R.x, n) == r\n     * ```\n     */\n    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n        const sg = signature;\n        msgHash = ensureBytes('msgHash', msgHash);\n        publicKey = ensureBytes('publicKey', publicKey);\n        const { lowS, prehash, format } = opts;\n        // Verify opts, deduce signature format\n        validateSigVerOpts(opts);\n        if ('strict' in opts)\n            throw new Error('options.strict was renamed to lowS');\n        if (format !== undefined && format !== 'compact' && format !== 'der')\n            throw new Error('format must be compact or der');\n        const isHex = typeof sg === 'string' || ut.isBytes(sg);\n        const isObj = !isHex &&\n            !format &&\n            typeof sg === 'object' &&\n            sg !== null &&\n            typeof sg.r === 'bigint' &&\n            typeof sg.s === 'bigint';\n        if (!isHex && !isObj)\n            throw new Error('invalid signature, expected Uint8Array, hex string or Signature instance');\n        let _sig = undefined;\n        let P;\n        try {\n            if (isObj)\n                _sig = new Signature(sg.r, sg.s);\n            if (isHex) {\n                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n                // Since DER can also be 2*nByteLength bytes, we check for it first.\n                try {\n                    if (format !== 'compact')\n                        _sig = Signature.fromDER(sg);\n                }\n                catch (derError) {\n                    if (!(derError instanceof DER.Err))\n                        throw derError;\n                }\n                if (!_sig && format !== 'der')\n                    _sig = Signature.fromCompact(sg);\n            }\n            P = Point.fromHex(publicKey);\n        }\n        catch (error) {\n            return false;\n        }\n        if (!_sig)\n            return false;\n        if (lowS && _sig.hasHighS())\n            return false;\n        if (prehash)\n            msgHash = CURVE.hash(msgHash);\n        const { r, s } = _sig;\n        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n        const is = invN(s); // s^-1\n        const u1 = modN(h * is); // u1 = hs^-1 mod n\n        const u2 = modN(r * is); // u2 = rs^-1 mod n\n        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n        if (!R)\n            return false;\n        const v = modN(R.x);\n        return v === r;\n    }\n    return {\n        CURVE,\n        getPublicKey,\n        getSharedSecret,\n        sign,\n        verify,\n        ProjectivePoint: Point,\n        Signature,\n        utils,\n    };\n}\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = _0n;\n    for (let o = q - _1n; o % _2n === _0n; o /= _2n)\n        l += _1n;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n    // 2n ** c1 == 2n << (c1-1)\n    const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v) => {\n        let tv1 = c6; // 1. tv1 = c6\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n        // 17. for i in (c1, c1 - 1, ..., 2):\n        for (let i = c1; i > _1n; i--) {\n            let tv5 = i - _2n; // 18.    tv5 = i - 2\n            tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n        }\n        return { isValid: isQR, value: tv3 };\n    };\n    if (Fp.ORDER % _4n === _3n) {\n        // sqrt_ratio_3mod4(u, v)\n        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n        sqrtRatio = (u, v) => {\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n        };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU(Fp, opts) {\n    validateField(Fp);\n    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n        throw new Error('mapToCurveSimpleSWU: invalid opts');\n    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n    if (!Fp.isOdd)\n        throw new Error('Fp.isOdd is not implemented!');\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return (u) => {\n        // prettier-ignore\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n        y = Fp.mul(y, value); // 20.   y = y * y1\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n        x = Fp.div(x, tv4); // 25.   x = x / tv4\n        return { x, y };\n    };\n}\n//# sourceMappingURL=weierstrass.js.map","/**\n * Utilities for short weierstrass curves, combined with noble-hashes.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass } from './abstract/weierstrass.js';\n/** connects noble-curves to noble-hashes */\nexport function getHash(hash) {\n    return {\n        hash,\n        hmac: (key, ...msgs) => hmac(hash, key, concatBytes(...msgs)),\n        randomBytes,\n    };\n}\nexport function createCurve(curveDef, defHash) {\n    const create = (hash) => weierstrass({ ...curveDef, ...getHash(hash) });\n    return { ...create(defHash), create };\n}\n//# sourceMappingURL=_shortw_utils.js.map","/**\n * NIST secp256k1. See [pdf](https://www.secg.org/sec2-v2.pdf).\n *\n * Seems to be rigid (not backdoored)\n * [as per discussion](https://bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975).\n *\n * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n * [See explanation](https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066).\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { createCurve } from './_shortw_utils.js';\nimport { createHasher, isogenyMap } from './abstract/hash-to-curve.js';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport { aInRange, bytesToNumberBE, concatBytes, ensureBytes, inRange, numberToBytesBE, } from './abstract/utils.js';\nimport { mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a, b) => (a + b / _2n) / b;\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y) {\n    const P = secp256k1P;\n    // prettier-ignore\n    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n    // prettier-ignore\n    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n    const b2 = (y * y * y) % P; // x^3, 11\n    const b3 = (b2 * b2 * y) % P; // x^7\n    const b6 = (pow2(b3, _3n, P) * b3) % P;\n    const b9 = (pow2(b6, _3n, P) * b3) % P;\n    const b11 = (pow2(b9, _2n, P) * b2) % P;\n    const b22 = (pow2(b11, _11n, P) * b11) % P;\n    const b44 = (pow2(b22, _22n, P) * b22) % P;\n    const b88 = (pow2(b44, _44n, P) * b44) % P;\n    const b176 = (pow2(b88, _88n, P) * b88) % P;\n    const b220 = (pow2(b176, _44n, P) * b44) % P;\n    const b223 = (pow2(b220, _3n, P) * b3) % P;\n    const t1 = (pow2(b223, _23n, P) * b22) % P;\n    const t2 = (pow2(t1, _6n, P) * b2) % P;\n    const root = pow2(t2, _2n, P);\n    if (!Fpk1.eql(Fpk1.sqr(root), y))\n        throw new Error('Cannot find square root');\n    return root;\n}\nconst Fpk1 = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\n/**\n * secp256k1 short weierstrass curve and ECDSA signatures over it.\n *\n * @example\n * import { secp256k1 } from '@noble/curves/secp256k1';\n *\n * const priv = secp256k1.utils.randomPrivateKey();\n * const pub = secp256k1.getPublicKey(priv);\n * const msg = new Uint8Array(32).fill(1); // message hash (not message) in ecdsa\n * const sig = secp256k1.sign(msg, priv); // `{prehash: true}` option is available\n * const isValid = secp256k1.verify(sig, msg, pub) === true;\n */\nexport const secp256k1 = createCurve({\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7),\n    Fp: Fpk1, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    endo: {\n        // Endomorphism, see above\n        beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n        splitScalar: (k) => {\n            const n = secp256k1N;\n            const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n            const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n            const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n            const b2 = a1;\n            const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n            const c1 = divNearest(b2 * k, n);\n            const c2 = divNearest(-b1 * k, n);\n            let k1 = mod(k - c1 * a1 - c2 * a2, n);\n            let k2 = mod(-c1 * b1 - c2 * b2, n);\n            const k1neg = k1 > POW_2_128;\n            const k2neg = k2 > POW_2_128;\n            if (k1neg)\n                k1 = n - k1;\n            if (k2neg)\n                k2 = n - k2;\n            if (k1 > POW_2_128 || k2 > POW_2_128) {\n                throw new Error('splitScalar: Endomorphism failed, k=' + k);\n            }\n            return { k1neg, k1, k2neg, k2 };\n        },\n    },\n}, sha256);\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES = {};\nfunction taggedHash(tag, ...messages) {\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n        const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n        tagP = concatBytes(tagH, tagH);\n        TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    return sha256(concatBytes(tagP, ...messages));\n}\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n) => numberToBytesBE(n, 32);\nconst modP = (x) => mod(x, secp256k1P);\nconst modN = (x) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv) {\n    let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n    let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n    const scalar = p.hasEvenY() ? d_ : modN(-d_);\n    return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x) {\n    aInRange('x', x, _1n, secp256k1P); // Fail if x ≥ p.\n    const xx = modP(x * x);\n    const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n    let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n    if (y % _2n !== _0n)\n        y = modP(-y); // Return the unique point P such that x(P) = x and\n    const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n    p.assertValidity();\n    return p;\n}\nconst num = bytesToNumberBE;\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args) {\n    return modN(num(taggedHash('BIP0340/challenge', ...args)));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey) {\n    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(message, privateKey, auxRand = randomBytes(32)) {\n    const m = ensureBytes('message', message);\n    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n    const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n    const t = numTo32b(d ^ num(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n    const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n    const k_ = modN(num(rand)); // Let k' = int(rand) mod n\n    if (k_ === _0n)\n        throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n    sig.set(rx, 0);\n    sig.set(numTo32b(modN(k + e * d)), 32);\n    // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n    if (!schnorrVerify(sig, m, px))\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature, message, publicKey) {\n    const sig = ensureBytes('signature', signature, 64);\n    const m = ensureBytes('message', message);\n    const pub = ensureBytes('publicKey', publicKey, 32);\n    try {\n        const P = lift_x(num(pub)); // P = lift_x(int(pk)); fail if that fails\n        const r = num(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n        if (!inRange(r, _1n, secp256k1P))\n            return false;\n        const s = num(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n        if (!inRange(s, _1n, secp256k1N))\n            return false;\n        const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n        const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n        if (!R || !R.hasEvenY() || R.toAffine().x !== r)\n            return false; // -eP == (n-e)P\n        return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n    }\n    catch (error) {\n        return false;\n    }\n}\n/**\n * Schnorr signatures over secp256k1.\n * https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n * @example\n * import { schnorr } from '@noble/curves/secp256k1';\n * const priv = schnorr.utils.randomPrivateKey();\n * const pub = schnorr.getPublicKey(priv);\n * const msg = new TextEncoder().encode('hello');\n * const sig = schnorr.sign(msg, priv);\n * const isValid = schnorr.verify(sig, msg, pub);\n */\nexport const schnorr = /* @__PURE__ */ (() => ({\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    utils: {\n        randomPrivateKey: secp256k1.utils.randomPrivateKey,\n        lift_x,\n        pointToBytes,\n        numberToBytesBE,\n        bytesToNumberBE,\n        taggedHash,\n        mod,\n    },\n}))();\nconst isoMap = /* @__PURE__ */ (() => isogenyMap(Fpk1, [\n    // xNum\n    [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n    ],\n    // xDen\n    [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n    ],\n    // yDen\n    [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n].map((i) => i.map((j) => BigInt(j)))))();\nconst mapSWU = /* @__PURE__ */ (() => mapToCurveSimpleSWU(Fpk1, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fpk1.create(BigInt('-11')),\n}))();\nconst htf = /* @__PURE__ */ (() => createHasher(secp256k1.ProjectivePoint, (scalars) => {\n    const { x, y } = mapSWU(Fpk1.create(scalars[0]));\n    return isoMap(x, y);\n}, {\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n    p: Fpk1.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256,\n}))();\n/** secp256k1 hash-to-curve from [RFC 9380](https://www.rfc-editor.org/rfc/rfc9380). */\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\n/** secp256k1 encode-to-curve from [RFC 9380](https://www.rfc-editor.org/rfc/rfc9380). */\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n//# sourceMappingURL=secp256k1.js.map"],"names":["Maj","a","b","c","HashMD","Hash","constructor","blockLen","outputLen","padOffset","isLE","super","this","finished","length","pos","destroyed","buffer","Uint8Array","view","createView","update","data","aexists","len","toBytes","take","Math","min","set","subarray","process","dataView","roundClean","digestInto","out","aoutput","fill","i","byteOffset","value","setBigUint64","_32n","BigInt","_u32_max","wh","Number","wl","h","l","setUint32","oview","Error","outLen","state","get","digest","res","slice","destroy","_cloneInto","to","SHA256_K","Uint32Array","SHA256_IV","SHA256_W","SHA256","A","B","C","D","E","F","G","H","offset","getUint32","W15","W2","s0","rotr","s1","T1","T2","sha256","wrapConstructor","HMAC","hash","_key","ahash","key","iHash","create","pad","oHash","buf","abytes","Object","getPrototypeOf","hmac","message","_0n","_1n","_2n","isBytes","ArrayBuffer","isView","name","item","abool","title","hexes","Array","from","_","toString","padStart","bytesToHex","bytes","hex","numberToHexUnpadded","num","hexToNumber","asciis","asciiToBase16","ch","hexToBytes","hl","al","array","ai","hi","n1","charCodeAt","n2","undefined","char","bytesToNumberBE","bytesToNumberLE","reverse","numberToBytesBE","n","numberToBytesLE","ensureBytes","expectedLength","e","concatBytes","arrays","sum","isPosBig","inRange","max","aInRange","bitLen","bitMask","u8n","u8fr","arr","createHmacDrbg","hashLen","qByteLen","hmacFn","v","k","reset","reseed","seed","gen","sl","push","pred","validatorFns","bigint","val","function","boolean","string","stringOrUint8Array","isSafeInteger","isArray","field","object","Fp","isValid","validateObject","validators","optValidators","checkField","fieldName","type","isOptional","checkVal","String","entries","memoized","fn","map","WeakMap","arg","args","computed","diff","str","TextEncoder","encode","_3n","_4n","_5n","_8n","mod","result","pow","power","modulo","pow2","x","invert","number","u","r","m","FpSqrt","P","p1div4","root","eql","sqr","c1","mul","nv","sub","ONE","legendreC","Q","S","Z","Q1div2","neg","g","ZERO","t2","ge","tonelliShanks","FIELD_FIELDS","nLength","nBitLength","_nBitLength","nByteLength","ceil","Field","ORDER","redef","BITS","BYTES","sqrtP","f","freeze","MASK","is0","isOdd","lhs","rhs","add","p","d","FpPow","div","sqrN","addN","subN","mulN","inv","sqrt","invertBatch","lst","nums","tmp","lastMultiplied","reduce","acc","inverted","reduceRight","FpInvertBatch","cmov","fromBytes","getFieldBytesLength","fieldOrder","bitLength","getMinHashLength","constTimeNegate","condition","negate","validateW","W","bits","calcWOpts","windows","windowSize","pointPrecomputes","pointWindowSizes","getW","pippenger","fieldN","points","scalars","forEach","validateMSMPoints","s","validateMSMScalars","zero","wbits","buckets","floor","j","scalar","resI","sumI","double","validateBasic","curve","Gx","Gy","validateSigVerOpts","opts","lowS","prehash","b2n","h2b","ut","DERErr","DER","Err","_tlv","tag","dataLen","ut.numberToHexUnpadded","lenLen","decode","first","lengthBytes","_int","parseInt","toSig","int","tlv","ut.abytes","seqBytes","seqLeftBytes","rBytes","rLeftBytes","sBytes","sLeftBytes","hexFromSig","sig","seq","weierstrassPoints","CURVE","ut.validateObject","allowedPrivateKeyLengths","wrapPrivateKey","isTorsionFree","clearCofactor","allowInfinityPoint","endo","beta","splitScalar","validatePointOpts","Fn","_c","point","_isCompressed","toAffine","ut.concatBytes","y","tail","weierstrassEquation","x2","x3","normPrivateKeyToScalar","lengths","N","ut.isBytes","ut.bytesToHex","includes","ut.bytesToNumberBE","error","ut.aInRange","assertPrjPoint","other","Point","toAffineMemo","iz","px","py","pz","z","ax","ay","zz","assertValidMemo","left","right","fromAffine","normalizeZ","toInv","fromHex","assertValidity","fromPrivateKey","privateKey","BASE","multiply","msm","_setWindowSize","wnaf","setWindowSize","hasEvenY","equals","X1","Y1","Z1","X2","Y2","Z2","U1","U2","b3","X3","Y3","Z3","t0","t1","t3","t4","t5","subtract","wNAF","wNAFCached","multiplyUnsafe","sc","I","hasPrecomputes","wNAFCachedUnsafe","k1neg","k1","k2neg","k2","k1p","k2p","fake","f1p","f2p","multiplyAndAddUnsafe","cofactor","toRawBytes","isCompressed","toHex","_bits","elm","unsafeLadder","precomputeWindow","base","window","precomputes","mask","maxNumber","shiftBy","offset1","offset2","abs","cond1","cond2","wNAFUnsafe","curr","getPrecomputes","transform","comp","prev","delete","ProjectivePoint","isWithinCurveOrder","ut.inRange","weierstrass","curveDef","randomBytes","bits2int","bits2int_modN","validateOpts","CURVE_ORDER","compressedLen","uncompressedLen","modN","invN","cat","head","y2","sqrtError","suffix","numToNByteStr","ut.numberToBytesBE","isBiggerThanHalfOrder","slcNum","Signature","recovery","fromCompact","fromDER","addRecoveryBit","recoverPublicKey","msgHash","rec","radj","prefix","R","ir","u1","u2","hasHighS","normalizeS","toDERRawBytes","ut.hexToBytes","toDERHex","toCompactRawBytes","toCompactHex","utils","isValidPrivateKey","randomPrivateKey","fieldLen","minLen","reduced","mapHashToField","precompute","isProbPub","delta","ORDER_MASK","ut.bitMask","int2octets","prepSig","defaultSigOpts","some","extraEntropy","ent","h1int","seedArgs","k2sig","kBytes","ik","q","normS","defaultVerOpts","getPublicKey","getSharedSecret","privateA","publicB","sign","privKey","ut.createHmacDrbg","drbg","verify","signature","publicKey","sg","format","isHex","isObj","_sig","derError","is","getHash","msgs","secp256k1P","secp256k1N","divNearest","Fpk1","_6n","_11n","_22n","_23n","_44n","_88n","b2","b6","b9","b11","b22","b44","b88","b176","b220","b223","secp256k1","defHash","createCurve","a1","b1","a2","POW_2_128","c2"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8]}